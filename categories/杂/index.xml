<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>杂 on 沉海记</title><link>https://qqqy.dev/categories/%E6%9D%82/</link><description>Recent content in 杂 on 沉海记</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://qqqy.dev/categories/%E6%9D%82/index.xml" rel="self" type="application/rss+xml"/><item><title>回顾在 NocoBase 远程工作这一年</title><link>https://qqqy.dev/%E5%9B%9E%E9%A1%BE%E5%9C%A8-nocobase-%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E8%BF%99%E4%B8%80%E5%B9%B4/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E5%9B%9E%E9%A1%BE%E5%9C%A8-nocobase-%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E8%BF%99%E4%B8%80%E5%B9%B4/</guid><description>&lt;blockquote>
&lt;p>本来我计划在入职一周年的时候写这篇文章，但是由于那段时间，我们正忙于发布 NocoBase 1.0 版本，所以这篇文章写的稍晚了一些。值得高兴的时候，1.0 版本在上个月底终于发布了，虽然过程磕磕绊绊，但好在是跟用户见面了。在此之前，我们已经将发布时间推迟了好几次。借此机会，也想回顾一下在 NocoBase 远程工作的这一年。&lt;/p>
&lt;/blockquote>
&lt;h1 id="nocobase-介绍">NocoBase 介绍&lt;/h1>
&lt;p>NocoBase 是一个开源的无代码平台，迄今为止已经开发了三年多，在过去鲜有宣发的情况下，GitHub 也积累了 5.6k 的 Star, 和一些忠实的用户。在我看来，NocoBase 有一些区别于竞品的特点:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>NocoBase 采用微内核，插件化的架构。我们通常不会强调功能大而全面，我们更注重扩展性。依靠我们团队目前的人力，也不可能在系统功能上做到面面俱到。在 NocoBase 内核的基础上，我们很容易开发集成自己想要的功能，我们更多的提供接入功能的协议和接口，而非具体的功能。举个例子，我们在设计用户认证模块的时候，就充分考虑了可扩展性。不同客户想要的登录认证方式有无数种，而我们默认只提供密码，短信，CAS, OIDC, SAML 等常见的方式，显然还有很多客户的需求没有办法照顾到。得益于可扩展的接口设计，我们基本上在一到两天内就能开发接入一种新的用户认证方式。即使客户提出的功能我们可能当下并不具备，我们也能快速满足客户的需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无代码和低代码在讨论的时候经常一起出现，NocoBase 的绝大多数功能都以无代码的方式提供。和很多竞品可以直接在网页上写代码不同，NocoBase 鲜有可以直接编写代码的地方，功能扩展基本上依靠开发插件的形式。这一点上，孰优孰劣，见仁见智。我个人是不喜欢在 Web 应用上塞一堆难以维护的脚本代码，所以我更倾向于我们现在的做法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同于很多低代码平台的界面配置交互是通过拖拉拽来编排，NocoBase 由模型驱动界面，强调 UI 和数据分离。同一张表同一套数据，可以通过很多不同形式呈现。NocoBase 提供了表格，表单，看板，图表，日历，列表等不同的展示方式，这些不用的展示方法在 NocoBase 里面统称为区块，区块内部可以配置不同的数据表字段和对应的字段组件。NocoBase 的页面由区块组合完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同于很多竞品通过 Sass 的方式提供服务，NocoBase 强调的独立部署。NocoBase 并不提供特定的功能服务，它更像一个基架，我们的用户可以在此基础上搭建自己的产品，甚至提供自己的 Sass 服务。通过插件扩展系统功能，每个人都可以搭建出独一无二的产品。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="加入-nocobase">加入 NocoBase&lt;/h1>
&lt;p>在加入 NocoBase 之前，我已经关注过一段时间。在我还在上大学的时候，就跟现在团队的 Tech Lead 霖哥有过几年时间的紧密合作，可以说在我刚开始做项目的时候，他就是我的 Mentor. 他开始做这个项目的时候，就跟我简单介绍过。由于对彼此的熟悉，所以我在加入团队前也没有过多的考察。当然这个时候我已经正式工作了几年，在选择一个新工作的时候我也有自己的考量，幸运的是后面跟我们现在的老板老周聊的也很愉快，很多理念都比较契合，于是就敲定了合作意向。简单来说有几点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>团队有合理的目标和良好的长期规划，大家都是长期主义者，能够沉下心来做好产品。NocoBase 已经开发了三年时间，也即将进入商业化阶段，我加入的时间是一个不错的时间节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我以前也接触过一些 2B, 2G 的私有化项目，往往定制程度非常高，而且作为纯粹的乙方角色，不管是前期沟通还是后期工作都非常心累。在这边我们基本掌握产品设计和开发的自主权，多数时候我们只开发大部分客户需要的通用功能，不需要提供保姆服务，高度定制化的需求由客户自主开发插件实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>离开大厂，我希望接下来的工作环境能让我更加专注地写代码，而不是面向绩效、晋级编程。我希望深度参与一个我认可的产品，充分发挥我的长处。在了解了 NocoBase 以后，我对 NocoBase 未来的发展抱有信心。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="完成第一个任务">完成第一个任务&lt;/h1>
&lt;p>我在 NocoBase 的第一个任务是重构用户认证模块。彼时 NocoBase 已经支持密码、短信、OIDC, SAML 等几种用户认证方式，但仍然存在以下问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>现有认证方式比较有限，只能满足小部分客户的需要。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同的用户认证模式在整体流程上有很多相似的地方，但这几种认证方式各自作为插件独立存在，代码逻辑上没有很好的复用。如果有客户需要一种新的认证方式，我们只能从头开始实现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如前文所提到的，我们的首要任务不是开发更多的认证方式插件来满足客户的需求，因为这样低效且没有止境。我的任务目标是在内核实现一个认证管理模块，定义一套标准的认证接口，插件开发者只需要实现标准接口，并注册到认证管理模块，即可扩展一种新的认证方式。&lt;/p>
&lt;p>在一开始实现需求的时候，我并没有做的很好。虽然我对自己拆解需求、设计方案和适应新项目的能力有足够的信心，但是初来乍到，前期也存在一定的沟通不畅的问题，一开始我写的代码只能说不尽人意。好在经过反复几轮的沟通和讨论，最终确定并实现了一个相对合理的方案。作为第一个任务，这个结果也算及格。&lt;/p>
&lt;p>经过几次迭代，目前 NocoBase 的用户认证模块设计我个人还是比较满意的。近日我在开发新的 LDAP 认证插件的时候，基本上用一天时间就写完了主流程代码，再用一天时间完善细节、补充测试和文档，跟过去的开发一个认证插件的效率对比有极大的提升。&lt;/p>
&lt;p>对于如何更快地融入一个新的开发团队，和上手一个新项目，我自己也有一些心得。我认为认真走读代码是一件收益很大的事情，哪怕可能需要花很长时间。不管是以前工作中接触到的新项目还是 NocoBase, 我都是这样做的。在加入 NocoBase 之前，我对 NocoBase 的项目代码进行了走读，梳理了各个模块的关系和作用，对于重点部分代码，逐行阅读。包括 NocoBase 核心涉及到的几个重要的开源库，比如 Formily, Sequelize, 我也通过文档了解和学习。这个过程对于我后来快速上手开发有很大的帮助。&lt;/p>
&lt;h1 id="团队特色和文化">团队特色和文化&lt;/h1>
&lt;p>NocoBase 团队是一个全员远程工作的团队，人数不多，有几位同事也是跟我差不多时间加入的。大多数同事都是开发，有一位同事负责测试工作。老周主要负责商务工作，他经常带来一些关于不同行业的客户的新鲜的消息。为商业化推广做准备，今年初我们也加入了一位负责运营工作的同事。&lt;/p>
&lt;p>平常工作的时间大家基本上通过 IM 沟通，偶尔需要通过在线会议小范围地讨论需求细节，另外每周有一次全员周会，时间大概在2到3个小时，除此之外，再也没有什么琐事会打断工作。平时如果有私事要处理，也不需要请假，只需要妥善安排好工作即可。&lt;/p>
&lt;p>在 NocoBase 工作和以往工作最大的不同在于，团队的每个人都身兼多职。一个新功能的诞生大致需要经过以下步骤：&lt;/p>
&lt;ol>
&lt;li>需求分析和讨论&lt;/li>
&lt;li>撰写功能文档和设计原型&lt;/li>
&lt;li>实现方案调研和确定&lt;/li>
&lt;li>开发（包括单元测试、接口测试、e2e测试等）&lt;/li>
&lt;li>人工测试&lt;/li>
&lt;li>撰写使用手册&lt;/li>
&lt;li>合并发布&lt;/li>
&lt;/ol>
&lt;p>我们没有专门的产品经理，一个新需求在刚提出的初期通常比较模糊，即使有文档，也只是一个雏形，并不具体。所以往往要求功能的开发负责人能够主导整个过程，包括最初的功能设计、方案调研，到开发测试，撰写文档。当然在这个过程中也有其他同事的合作，但最终的产出结果由该功能的开发负责人负责。功能的开发负责人不再是单纯的开发者的角色，除了编写逻辑清晰良好、可维护性强的代码以外，往往还需要思考功能的合理性和易用性，包括一些交互设计的细节也需要考虑。&lt;/p>
&lt;p>我们在考察新人的时候，除了考察基本的编码能力和对项目的理解程度，同时也注重观察他在开发功能的过程中，有没有自己对功能设计的深入思考，能否进一步完善功能细节，还是只能按部就班，点到为止。所以有很多人可能编码能力也不差，但并不能很好的适应我们的开发方式。我们团队的成员，没有很多的光环和头衔，可能编码能力也不是最出众的，但气场一定是互相契合的。&lt;/p>
&lt;p>我们团队的氛围很好，在能力范围之内，不管是不是自己负责的功能，多数时候大家都能参与讨论，提出自己的建议和看法，供负责人参考。每个人都保持对 NocoBase 的热情，不断思考，持续输出。&lt;/p>
&lt;h1 id="对团队和-nocobase-的期待">对团队和 NocoBase 的期待&lt;/h1>
&lt;p>NocoBase 在我刚加入的时候，开发体系建设还不够完善，相对来说有点刀耕火种。我记得光 ESlint 规则检查我就提出了好几次，直到后面一位新同事超杰加入，他也提出了这个问题并着手进行了改进，我们的代码项目总算才有了代码规则检查。更别说还有大量模块缺少相应的自动化测试。&lt;/p>
&lt;p>令人欣慰的是，在这短短一年的时间，我们在快速迭代新功能的同时，也在不断优化项目架构和提升代码质量。我们重构了大量模块，优化了应用的生命周期，完善内核 API 设计，补充了大量单元测试和接口测试。引入 E2E, 代替部分人工测试，提高测试效率，同时也更好地保障了代码的稳定性。&lt;/p>
&lt;p>刚发布了 NocoBase 1.0, 虽然还只是 alpha 版本，但对于我们来说也是一个重要的里程碑。我们开始将 NocoBase 商业化，并准备进一步地推广。NocoBase 让我们接触到了各行各业不同的客户，打开了我们认识这个世界的方式。NocoBase 还能给我们带来什么，这是我所期待的。像霖哥刚开始的时候跟我聊的，希望写代码也能在互联网上留下来一点什么东西。&lt;/p>
&lt;h1 id="远程办公的感受">远程办公的感受&lt;/h1>
&lt;p>最后聊一聊远程办公一年的一点感受。基本上我在工作日的时间安排是：8点到9点之间起床洗漱，做早饭，通常是蒸鸡蛋和馒头，按下定时以后，下楼到小区隔壁的菜市场买菜，回来以后吃早饭，大概10点钟开始工作，一直到12点半左右，做午饭、吃饭、休息，到下午3点继续工作，到5点半或者6点，开始准备晚饭，等女朋友下班xD，吃晚饭。忙的时候晚上通常还需要工作1到2个小时的时间，偶尔会更长。&lt;/p>
&lt;p>总体来说，在家办公工作效率是比较高的。一天工作的总时长可能会比过去的工作稍短，但大多数时间注意力是更专注的。在办公室里经常会被打断，算下来的有效工作时间还更短。&lt;/p>
&lt;p>不过在家办公容易陷入一种所谓 Burnout 的状态，因为一直坐在“工位”上，有时候明明需要休息了，还会想要把手上的问题解决完，但问题又持续产生，就不容易停下来。我也在努力把握工作和生活的平衡，除了工作以外，也需要注重休息和运动。&lt;/p>
&lt;p>另外我还希望在工作之余能找到其他一些可以持续去做的事情，也可能是做一些 Side projects, 但目前好像还没有找到特别适合自己的有意思的事。去年我尝试在B站讲CS50x这门课，想要用自己的知识和经验帮助一些计算机的初学者，但也只进行到一半，过完年因为工作比较忙，就暂时搁置了，过段时间可能会重启。未来希望除了 NocoBase 作为主要的事业，还能找到其他一些适合自己的发展方向。&lt;/p></description></item><item><title>Implement infinite scrolling using IntersectionObserver in React</title><link>https://qqqy.dev/implement-infinite-scrolling-using-intersectionobserver-in-react/</link><pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate><guid>https://qqqy.dev/implement-infinite-scrolling-using-intersectionobserver-in-react/</guid><description>&lt;blockquote>
&lt;p>Documenting a method for implementing infinite scrolling using &lt;code>IntersectionObserver&lt;/code> in React.&lt;/p>
&lt;/blockquote>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In web development, it is a common requirement to automatically load the next page of a list when the scroll bar touches the bottom. There are typically two approaches to achieve this. One is to compare the distance of the scroll bar from the top of the container with the height of the container itself. The other is to use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank">&lt;code>IntersectionObserver&lt;/code>&lt;/a> API.&lt;/p>
&lt;blockquote>
&lt;p>The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&amp;rsquo;s viewport.&lt;/p>
&lt;/blockquote>
&lt;h1 id="solution">Solution&lt;/h1>
&lt;p>With the help of &lt;code>IntersectionObserver&lt;/code>, we can monitor the last item of the current list. When it appears in the viewport, we load the next page and then move the observer to the last item of the next page.&lt;/p>
&lt;h1 id="implemention">Implemention&lt;/h1>
&lt;p>Here&amp;rsquo;s a simple implementation idea, including some pseudo code. You&amp;rsquo;ll need to modify it according to your needs to make it runnable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useCallback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useEffect&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useState&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">useLoadMoreObserver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loadMore&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loadMore&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// callback
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setLastItem&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">React.RefObject&lt;/span>&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="na">any&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">observer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">IntersectionObserver&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">observeExposure&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useCallback&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">lastItem&lt;/span>: &lt;span class="kt">React.RefObject&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">any&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disconnect&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">IntersectionObserver&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">entries&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">entry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">lastItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isIntersecting&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unobserve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loadMore&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">observe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">loadMore&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observeExposure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disconnect&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">observeExposure&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastItem&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setLastItem&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">List&lt;/span>: &lt;span class="kt">React.FC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setData&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setList&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">([]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">loading&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setLoading&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">loadMore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">meta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">meta&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">meta&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">page&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">totalPage&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setLoading&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// request next page
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">params&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">page&lt;/span>: &lt;span class="kt">meta.page&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pageSize&lt;/span>: &lt;span class="kt">meta.pageSize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setLoading&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">lastItem&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setLastItem&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useLoadMoreObserver&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">loadMore&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">any&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setLastItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ref&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setList&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">prev&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">prev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setLastItem&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useMemo&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">key&lt;/span>: &lt;span class="kt">item.name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">label&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">index&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">roles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">lastItem&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastItem&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">roles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Menu&lt;/span> &lt;span class="na">items&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;No data&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Packaging and downloading files through streaming in NodeJS</title><link>https://qqqy.dev/packaging-and-downloading-files-through-streaming-in-nodejs/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/packaging-and-downloading-files-through-streaming-in-nodejs/</guid><description>&lt;h1 id="background">Background&lt;/h1>
&lt;p>Last week, I developed a feature that can package the log files produced by the application into a &lt;code>tar.gz&lt;/code> file and enable online downloading. While this is may seem like a straight forward feature, there are still some intriguing aspects worth documenting.&lt;/p>
&lt;h1 id="generate-temporary-file-delete-later">Generate temporary file, delete later&lt;/h1>
&lt;p>The simplest method to implement this feature is to generate a tarball on the server&amp;rsquo;s disk and delete it after it&amp;rsquo;s been downloaded. The code is roughly like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">tar&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;tar&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">unlink&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;fs/promises&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">dowload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">files&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;logs.tar.gz&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">attachment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">tar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gzip&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">file&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createReadStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sb">`/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">unlink&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">file&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>&lt;br>
Since we use &lt;a href="https://koajs.com/">Koa&lt;/a>, I can make use of &lt;code>ctx.attachment&lt;/code>. It is equivalent to:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Content-disposition&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;attachment; filename=&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">filename&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Content-type&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;application/gzip&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="stream-based-packaging-and-download">Stream-based packaging and download&lt;/h1>
&lt;p>Creating a temporary file and deleting it after download seems straightforward, but it can be considered cumbersome or less elegant since it still occupies disk space temporarily and may lead to issues if errors occur during this process and potential risk of leaving the file behind if deletion fails.&lt;/p>
&lt;p>A common alternative is packaging files via streaming, demonstrated by the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tarFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">passthrough&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PassThrougth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gzip&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">passthrough&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">passthrough&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">dowload&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">files&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">attachment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;logs.tar.gz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">tarFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we use &lt;code>stream.PassThrough&lt;/code> to establish a stream as an intemediary for passing the input bytes across to the output.&lt;/p>
&lt;h1 id="break-data-into-chunks">Break data into chunks&lt;/h1>
&lt;p>Well, the code above seems to work fine initially. However, in production, it hangs when attempting to
package and download large log files. I guess I should chunk the data during packaging due to memory limitations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tarFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">passthrough&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PassThrougth&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gzip&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">files&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">passthrough&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="node-tar-vs-tar-fs">&lt;code>node-tar&lt;/code> vs &lt;code>tar-fs&lt;/code>&lt;/h1>
&lt;p>Another issue arises while tring to download a changing online log file, resulting the &amp;ldquo;Error: did not encounter expected EOF&amp;rdquo; error throw by the package &lt;code>node-tar&lt;/code>. The only reference I have is this issue: &lt;a href="https://github.com/isaacs/node-tar/issues/238">https://github.com/isaacs/node-tar/issues/238&lt;/a>. I realized this is a feature and upon inspecting the source code, I couldn&amp;rsquo;t find a method to change this behavior without modifying the source code.&lt;/p>
&lt;p>I had to switch to another package, &lt;code>tar-fs&lt;/code>, for packaging, and it work seamlessly. While it does not offer a built-in gunzip feature, we have a native Node package called &lt;code>zlib&lt;/code> that can be utilized. The final code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tarFiles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">files&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">any&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">passthrough&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PassThrough&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">gz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">zlib&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createGzip&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">getLoggerFilePath&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">entries&lt;/span>: &lt;span class="kt">files&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">passthrough&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;end&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>React中的 useCallback 和 ahooks 中的 useMemoizedFn</title><link>https://qqqy.dev/react%E4%B8%AD%E7%9A%84-usecallback-%E5%92%8C-ahooks-%E4%B8%AD%E7%9A%84-usememoizedfn/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/react%E4%B8%AD%E7%9A%84-usecallback-%E5%92%8C-ahooks-%E4%B8%AD%E7%9A%84-usememoizedfn/</guid><description>&lt;blockquote>
&lt;p>应该是一个比较常见的问题了，但是在我这段工作开始之前，我有两三年没有正儿八经写前端了，我的 &lt;code>React&lt;/code> 经验还停留在 &lt;code>React 16&lt;/code>, 基本上算一个新手，所以记录一下。&lt;/p>
&lt;/blockquote>
&lt;p>事情的起因是我在组件的 &lt;code>useEffect&lt;/code> 中依赖了一个外部函数，当函数没有添加到依赖数组时，eslint 会报错 &amp;ldquo;mssing dependency&amp;rdquo;.&lt;/p>
&lt;img src="https://s2.loli.net/2023/09/21/CBbOykuAm6VFW7N.png"/>
&lt;p>虽然报错级别是 &lt;code>warning&lt;/code>, 但是作为一个强迫症，我不能忍啊。啪，很快的，我把这个函数直接就丢到依赖数组里了，这下好了，我发现 &lt;code>useEffect&lt;/code> 开始不停地触发。&lt;/p>
&lt;p>这个问题通过搜索，不难找到答案，因为每次函数的地址都会发生修改，导致 &lt;code>useEffect&lt;/code> 的依赖数组更新。结合搜索结果，我也很快想起来，有 &lt;code>useCallback&lt;/code> 这个东西。但是我发现 &lt;code>useCallback&lt;/code> 在我这个场景下好像用不了，因为我这个函数本身是引入的一个外部定义好的函数，放到 &lt;code>useCallback&lt;/code> 里还是要求将函数传入依赖数组，不传eslint就会有 &lt;code>warning&lt;/code>. 作为一个强迫症，我不能忍啊。&lt;/p>
&lt;p>后面找到解决方法，可以用 &lt;code>useRef&lt;/code> 来解决。用 &lt;code>useRef&lt;/code> 把这个函数套一下，在 &lt;code>useEffect&lt;/code> 里用 &lt;code>ref.current&lt;/code> 来调用就可以了，也不会要求传入依赖参数了。&lt;/p>
&lt;p>这个问题到上面就解决完了。但是刚好我们的代码库里是有用到 &lt;a href="https://ahooks.js.org/">ahooks&lt;/a>, 有一天我在看文档的时候，发现有一个 &lt;code>useMemoizedFn&lt;/code>. 根据文档的描述:&lt;/p>
&lt;blockquote>
&lt;p>持久化 function 的 Hook，理论上，可以使用 useMemoizedFn 完全代替 useCallback。
在某些场景中，我们需要使用 useCallback 来记住一个函数，但是在第二个参数 deps 变化时，会重新生成函数，导致函数地址变化。
使用 useMemoizedFn，可以省略第二个参数 deps，同时保证函数地址永远不会变化。&lt;/p>
&lt;/blockquote>
&lt;p>这恰恰是用来完美解决我的问题的，于是我就想知道它是怎么实现的，是不是也是通过 &lt;code>useRef&lt;/code>. 一看&lt;a href="https://github.com/alibaba/hooks/blob/5412bb719de1666ff2e947dfa3e1d231b7f9746f/packages/hooks/src/useMemoizedFn/index.ts#L12">代码&lt;/a>，确实是。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TypeScript" data-lang="TypeScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">useMemoizedFn&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">noop&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">fn&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isDev&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">isFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`useMemoizedFn expected parameter is a function, got &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">fnRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// why not write `fnRef.current = fn`?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// https://github.com/alibaba/hooks/issues/728
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fnRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useMemo&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">memoizedFn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">PickFunction&lt;/span>&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="na">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">memoizedFn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">memoizedFn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fnRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">memoizedFn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>新的 Golang side project 技术选型记录</title><link>https://qqqy.dev/%E6%96%B0%E7%9A%84-golang-side-project-%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E6%96%B0%E7%9A%84-golang-side-project-%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E8%AE%B0%E5%BD%95/</guid><description>&lt;blockquote>
&lt;p>打算利用工作之余的时间，写一个 side project, 简单记录一下前期的选型对比。&lt;/p>
&lt;/blockquote>
&lt;h1 id="语言-go">语言 &lt;code>Go&lt;/code>&lt;/h1>
&lt;p>这个 project 主要目标还是一个偏Web类的应用，这类应用用 JS 来撸肯定是最快最爽的，但是因为工作中的主要语言就是 JS，所以想换换口味。在上一份工作里有一半时间是写 Go 的，离职以后已经很久没用了，也不能荒废了，之前的工作写的也是偏业务功能的代码居多，没有很深入研究 Go, 所以想趁此机会捡起来一些。Go 用于开发Web应用也是比较不错的。而且我这个项目最终大概率是一个在本地运行居多的东西，我又不太想做成一个桌面应用，理想情况是利用一个可执行文件启动应用服务以后，用本地浏览器做应用载体，当然这个文件最终也可以打包成各个平台的软件包。Go的话利用 &lt;code>go:embed&lt;/code> 可以很方面地把前端产物打到最终的二进制文件里。综合上述几点原因，最终选择的开发语言是 &lt;strong>Go&lt;/strong>.&lt;/p>
&lt;h1 id="web框架-fiber">Web框架 &lt;code>fiber&lt;/code>&lt;/h1>
&lt;p>我对Web框架的要求基本上就是能处理 &lt;code>router&lt;/code> 和 &lt;code>handler&lt;/code> 就可以，Go 在这方面的库和轮子太多了，用过&lt;a href="https://github.com/gin-gonic/gin">gin&lt;/a>和&lt;a href="https://github.com/gorilla/mux">mux&lt;/a>, 甚至我觉得简单的场景 Go 自带的 &lt;code>http&lt;/code> 库也能用用。好像现在&lt;a href="https://github.com/gofiber/fiber">fiber&lt;/a> 还挺流行的，看了介绍，&amp;ldquo;Express inspired web framework&amp;rdquo;, 这个我熟，就它了。&lt;/p>
&lt;h1 id="orm框架-bun">ORM框架 &lt;code>Bun&lt;/code>&lt;/h1>
&lt;p>前面都比较顺利，在 ORM 框架选择上，费了不少功夫。其实在以前我基本上很少用ORM框架，最多用 query builder 库来拼 SQL。我要做的这个应用可能会有兼容多数据库的需要，所以写 raw sql 不太现实，也不能把时间都花在做 sql 兼容适配上，所以大概还是需要这么个东西。&lt;br>
本来我是想用以前我用的挺好的一个 query builder 的库 &lt;a href="https://github.com/doug-martin/goqu">goqu&lt;/a>, 但是看 Github 上面的代码最新提交已经是2年前了，比较想选择一个相对活跃的库，另外就是我还需要 &lt;em>migration&lt;/em> 的功能，这个库也没有。&lt;br>
在 &lt;a href="https://awesome-go.com/">awesome-go&lt;/a> 上看了一圈，发现 query builder 的库基本上都不带 &lt;em>migration&lt;/em> 功能，也想过用 query builder 库 + migration 库，但是很多单独的 &lt;code>migration&lt;/code> 库都是通过写 raw sql 来做的，没有实现不同数据库的兼容。
最后还是只能回头来看 ORM, &lt;a href="https://xorm.io/">xorm&lt;/a> 和 &lt;a href="https://gorm.io/">gorm&lt;/a> 我是用过的，基本上我对这两东西是拒绝的，很多东西太重了，还有光定义 &lt;code>Model&lt;/code> 和转换输出就麻烦。&lt;a href="https://github.com/ent/ent">ent&lt;/a> 算是另一种层面的 ORM ，但是看了下文档，感觉代码还是很冗杂，本质上没有降低写代码的心智负担。&lt;br>
反反复复看了看，还真让我找到一个比较合适的—— &lt;a href="https://bun.uptrace.dev/">bun&lt;/a>. 用法上基本是一个 query builder, 没有各种复杂的 Relation 需要定义，兼容常见的数据库，支持 &lt;em>migration&lt;/em> 功能，更新也比较活跃。不过具体体验还得用了才知道。&lt;/p></description></item><item><title>Diving into bulkCreate method in Sequelize</title><link>https://qqqy.dev/diving-into-bulkcreate-method-in-sequelize/</link><pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/diving-into-bulkcreate-method-in-sequelize/</guid><description>&lt;h1 id="background">Background&lt;/h1>
&lt;p>During my recent development work on a data synchronization feature using &lt;code>bulkCreate&lt;/code> method in &lt;a href="https://sequelize.org/api/v6/class/src/model.js~model#static-method-bulkCreate">Sequelize&lt;/a>, I encountered an issue with incorrect returning IDs when using the &lt;code>updateOnDuplicate: true&lt;/code> option. This led me to suspect that Sequelize generates the returning IDs through inference. To confirm my hypothesis, I decided to investigate the source code of Sequelize.&lt;/p>
&lt;h1 id="how-sequelize-generate-returning-ids-in-bulkcreate">How Sequelize generate returning IDs in &lt;code>bulkCreate&lt;/code>&lt;/h1>
&lt;p>Despite the extensive codebase of Sequelize, locating the &lt;code>bulkCreate&lt;/code> method was straightforward. A global search within the codebase led me directly to the &lt;code>src/model.js&lt;/code> file, where I found the relevant comment confirming my initial assumption.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * To obtain Instances for the newly created values, you will need to query for them again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, I proceeded to investigate this method by following the code snippets below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/model.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bulkInsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTableName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fieldMappedAttributes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">static&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sequelize&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getQueryInterface&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/sequelize.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dialect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/index.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Just take SQLite as an example.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">SQLiteQueryInterface&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sequelize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryGenerator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query-interface.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">SQLiteQueryInterface&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">QueryInterface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/abstract/query-generator.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">bulkInsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tableName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attributes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">QueryTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">INSERT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sequelize&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryGenerator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bulkInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tableName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attributes&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/sequelize.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dialect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bindParameters&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parameters&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handleQueryResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">columnTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">executionError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errForStack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally I got what I was aiming for:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">_handleQueryResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">metaData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">columnTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errStack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// add the inserted row id to the instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isUpsertQuery&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle bulkCreate AI primary key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;Statement&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">autoIncrementAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">autoIncrementAttribute&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawAttributes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">startId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getInsertIdField&lt;/span>&lt;span class="p">()]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">changes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">startId&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">startId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">changes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawAttributes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getInsertIdField&lt;/span>&lt;span class="p">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon the &lt;code>_handleQueryResponse&lt;/code> method, it became apparent that Sequelize utilizes the last inserted ID and infers the remaining IDs when using &lt;code>bulkCreate&lt;/code>. Consequently, when using &lt;code>updateOnDuplicate: true&lt;/code> option, there is a possibility of receiving incorrect IDs in the return.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A handy tip for obtaining accurate IDs&lt;/strong>&lt;br>
Enhance the data table by introducing a &lt;code>batch&lt;/code> field, assigning a batch number to each set of data being inserted. Subsequently, you can query the inserted IDs by using the corresponding batch number.&lt;/p>
&lt;/blockquote>
&lt;h1 id="risk-of-using-updateonduplicate-true">Risk of using &lt;code>updateOnDuplicate: true&lt;/code>&lt;/h1>
&lt;p>While utilizing the &lt;code>updateOnDuplicate: true&lt;/code> option, I observed that even though duplicate rows are skipped, the &lt;code>autoIncrement&lt;/code> key continues to increment. From the &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html">documentation of MySQL&lt;/a>, it said:&lt;/p>
&lt;blockquote>
&lt;p>The effects are not quite identical: For an InnoDB table where a is an auto-increment column, the INSERT statement increases the auto-increment value but the UPDATE does not.&lt;/p>
&lt;/blockquote>
&lt;p>The database follows a process of attempting to insert, incrementing the ID, and then the duplicate is detected. However, once the ID is auto-incremented, it cannot be rolled back.&lt;/p>
&lt;p>This situation presents a potential risk when utilizing a master-slave database architecture. As the ID is auto-incremented but duplicate is detected, the operation do not leave bin logs, there is a chance for key conficts to arise when the master goes down and the slave is promoted as the new master.&lt;/p></description></item><item><title>为什么我想离开腾讯？</title><link>https://qqqy.dev/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E7%A6%BB%E5%BC%80%E8%85%BE%E8%AE%AF/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E7%A6%BB%E5%BC%80%E8%85%BE%E8%AE%AF/</guid><description>&lt;p>正式提交离职申请以后，我终于可以写一篇文章来回答这个在每一次面试的时候都会被问到的问题。用简短的话来回答，其实就是想做出改变，在工作上逃离舒适区，争取在生活上进入舒适区。&lt;/p>
&lt;h1 id="工作和成长">工作和成长&lt;/h1>
&lt;p>由于受到整体大环境和公司降本增效措施的影响，部门接连几次调整，年终奖惨淡。尽管在这个阶段对我来说，相比起钱，我更注重自己能力的成长，但是我手上负责的项目也被砍的七七八八，一直在接手和维护被裁同事留下来的项目，许久没有接触新的技术和更进一步的挑战。虽然每天早十晚六这么混着好像也不错，业务都比较熟悉，项目也没有太大的挑战，领导和同事也不错，除了周报比较难憋出来。但是毕竟现在还年轻，还是想跳出舒适区，进一步挑战自己。我是一个在工作中很需要获得参与感和成就感的人，但是在大厂搬砖，好像一个产品做好了做砸了，跟我的关系不是特别大，我只是一个对着需求单码代码的人。相对来说，腾讯也不是一个工程师文化很浓厚的公司，对于很多业务来说，大家都只想赚快钱，仅仅代表个人感觉，也不展开了。在大公司很多时候技术栈的选择也比较有限，只能使用自研产品。总而言之，就是我需要换个新的环境，接受新的学习和挑战，是时候离开了。初步的计划是自我学习和调整，往某一个方向钻的深入一些，另外就是更多的参与到开源项目，学习和应用新的主流的开源技术。当然也要赚点生活费。&lt;/p>
&lt;h1 id="生活和家庭">生活和家庭&lt;/h1>
&lt;p>算上上大学的时间，一转眼已经在深圳待了六年半，曾经很喜欢这个城市，现在却只觉得这个城市遥远。我跟同事讨论为啥深圳的道路要让行人和自行车、电动车都挤在一条狭小的人行道上，同事开玩笑说深圳的路是给有车的人设计的，没车的人滚一边去。望着高耸入云的房价，我不甘心成为这个城市的养料。于是跟女朋友商量了一下，决定去广州生活，如果广州留不下，我们还可以去佛山。总而言之，目的是通过降低欲望，提升生活质量和幸福感。在深圳的时候，生活的环境都是水泥钢筋，好像大家讨论的都是薪资、股票、贷款，一门心思想着搞钱。相比之下，广州虽然也是大城市，但是生活气息还是浓厚不少，物价也更低，可以用跟在深圳差不多的价格租到面积大一倍的房子，而且是生活配套齐全的大小区，唯一的不足可能是不常有蓝天白云。&lt;/p>
&lt;h1 id="未来">未来&lt;/h1>
&lt;p>通过最近面试，发现自己还有很多的不足。感觉自己未来还是比较想往技术方向发展，想更深入地钻研，所以可能会让自己慢下来，进一步自我学习，做更多的思考和沉淀。&lt;/p></description></item><item><title>面试国外远程公司的一些记录</title><link>https://qqqy.dev/%E9%9D%A2%E8%AF%95%E5%9B%BD%E5%A4%96%E8%BF%9C%E7%A8%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E9%9D%A2%E8%AF%95%E5%9B%BD%E5%A4%96%E8%BF%9C%E7%A8%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>去年11月份开始陆续在网上向国外一些支持远程工作的公司海投简历，记录一下这段经历。其实能拿到面试机会的就非常少，想去的估计就只有一两家了，最后也没有把握住机会。很多公司更倾向于在北美和欧洲招人，还有的因为数据、法律等问题明确拒绝中国大陆的人，可以参考我维护的&lt;a href="https://remotefrom.cn">支持在中国远程工作的公司的列表&lt;/a>。一开始我是在 Angel.co (一个创业公司网站，现在改名叫 Wellfound) 上面投递的简历，大多数都没有回复。后面发现 HackerNews 上有个叫 whoishiring 的账号，每个月1号都会发布一个帖子，让正在招人的公司可以在下面跟帖发 jd，通过这个列表来投递简历是效率比较高的。还有些公司比较高冷，只能在他们的官网上发现，这个主要是找 GitHub 上的项目以及想一下自己平常用的一些开发工具，去看对应的公司招不招人。&lt;/p>
&lt;p>最先给面试机会的是 Brankas，网上搜了下是印尼一家做金融开放API的公司，我没有任何 FinTech 的工作经验，也不是很感兴趣，不过打算练练手。首先是第一面是 HR 面，互相了解一下，会问一些简单的 Behavior Questions，但是问到期望薪资的时候，我说出来的时候感觉对方有点吃惊，因为她用了&amp;quot;Very expensive&amp;quot;来形容，并且表示这个薪资一般是需要8~10年经验的，不过她还是表示会给我发 Take home assignment. Assignment比较简单，就是用 Go 写一个简单的 HTTP 服务，处理一下文件上传保存请求。但是写完发过去就没有下文了，连个拒信都没有，估计是说期望薪资的时候就不打算要了。&lt;/p>
&lt;p>第二个给面试机会的公司是 Slab，洛杉矶一个做团队文档工具的小公司，产品跟 Notion 有点像，但是试用下来感觉有些地方做的比 Notion 还好。网上调查了下，两个 Co-founder 好像是中国人，团队里也有之前在石墨工作的中国人，CEO 是 Quilljs 作者，整体感觉都不错，挺想去的。面试流程是比较标准的美企流程，首先是一个 Initial screen, 第一次约在北京时间凌晨5点，我爬起来以后，发现hr搞错了 Zoom 链接，发了数封邮件都没有响应，就回去睡觉了，后面重新约了一次，听hr介绍了一下他们公司，之后发过来一个详细的邮件介绍 Hiring process. 先做一个 Online accessment, 限时一小时，这个题是从他们的代码功能里抽象的，不太典型但也不太难，用回溯写出来了。接下来约了两个小时的面试，一个小时 System Design, 一个小时 Behavior Questions. 面试之前我准备了非常多 SD 的东西，准备了一周多时间。正式面试约在北京时间早上7点，面 SD 的时候是 CEO 和一个工程师一起，题目也是 Web 应用类的，我抽象出来是一个爬虫+排序的项目，但是他们并不要求考虑可用性、高性能之类的，导致我准备的很多公式化的内容无用武之地，感觉这个项目实现起来并不复杂，所以也没太get到他们想要考察的点是什么，本来应该是我比较擅长的东西，但是确有点抓瞎。Behavior Questions 详细问了简历上的两段工作经历，第一段经历是我大学时候的远程工作经历，时间比较长了，但还是问的比较详细，而我准备的不是太充分。其他的回答的感觉还可以。自我感觉表现比较平庸，没用发挥自己的优势，面试结束后两天，收到了拒信，当时还是挺难受的，不过也不算意料之外。&lt;/p>
&lt;p>第三个说可以聊一聊的公司是澳大利亚一家卖酒的公司， 叫Good Pair Days，他们的产品看上去还可以，但我兴趣算是一般吧，加上技术栈不太符合，所以也没有特别准备。然后跟对方的 CTO 聊了半个小时，感觉双方不是太契合，就没有后续了。&lt;/p>
&lt;p>到这里很多能找到的支持远程的公司其实都被我投的七七八八了，比较绝望。后面发现了 &lt;a href="https://www.recurse.com/">Recurse Center&lt;/a> 项目，这个项目在中文互联网资料非常少，仔细看了下网站，蛮有兴趣的，想着能休息一段时间，自己学习提升，跟世界各地的人交流一下也不错。于是仔细写了申请，很快收到邮件说申请通过了，迎来第一次面试。面试官也是这个项目的参与者，但他不算太热情，有一点口音，一开始我一直没适应他用 R C这个简称，第一个问题我就听错了，他问我会怎么跟别人介绍这个项目，我听成了怎么介绍我自己，给他念了一大段自我介绍，后面他纠正后我才重新回答。在聊天过程中我卡在一个问题比较久，他让我描述一个最近解决的 Bug，因为我平常做的东西大多需要结合业务背景，一下子不知道怎么说，最后我想着挑一个简单的说，就讲了我最近在自己的项目里面遇到的一个变量赋值的小 Bug. 其他的问题还算常规，自我感觉答的还行。没想到面试结束后很快就收到了拒信，没有讲原因，这个让我难受了蛮久，没想到一个学习项目也没有申请上。&lt;/p>
&lt;p>虽然最后也没拿到海外公司的 Offer, 但这个过程还是收获不少。第一是英语能力还要加强，每次我都会把要说的东西先写下来，然后结合 Chrome 的实时翻译，面试的时候倒也能解决80%的问题，但是遇到没准备的问题，往往回答的不是很好，比如问到我不擅长什么东西，可能这个问题我用中文都很少回答，所以就回答的结结巴巴。第二个是技术方面，在海投过程中，发现了不少优秀的产品和项目，也发现了很多技术牛人的 GitHub，感觉毕业后几年在大厂里工作，忙着写业务搬砖，对自己要求降低了、松懈了，这个过程让我意识到自己还有很多需要提升的地方，激发了我学习的兴趣，也促成了我想要离职，学习和调整自己，同时参与到开源项目的想法。&lt;/p></description></item></channel></rss>