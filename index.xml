<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>沉海记</title><link>https://qqqy.dev/</link><description>Recent content on 沉海记</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sat, 08 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://qqqy.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Diving into bulkCreate method in Sequelize</title><link>https://qqqy.dev/diving-into-bulkcreate-method-in-sequelize/</link><pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/diving-into-bulkcreate-method-in-sequelize/</guid><description>&lt;h1 id="background">Background&lt;/h1>
&lt;p>During my recent development work on a data synchronization feature using &lt;code>bulkCreate&lt;/code> method in &lt;a href="https://sequelize.org/api/v6/class/src/model.js~model#static-method-bulkCreate">Sequelize&lt;/a>, I encountered an issue with incorrect returning IDs when using the &lt;code>updateOnDuplicate: true&lt;/code> option. This led me to suspect that Sequelize generates the returning IDs through inference. To confirm my hypothesis, I decided to investigate the source code of Sequelize.&lt;/p>
&lt;h1 id="how-sequelize-generate-returning-ids-in-bulkcreate">How Sequelize generate returning IDs in &lt;code>bulkCreate&lt;/code>&lt;/h1>
&lt;p>Despite the extensive codebase of Sequelize, locating the &lt;code>bulkCreate&lt;/code> method was straightforward. A global search within the codebase led me directly to the &lt;code>src/model.js&lt;/code> file, where I found the relevant comment confirming my initial assumption.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * To obtain Instances for the newly created values, you will need to query for them again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, I proceeded to investigate this method by following the code snippets below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/model.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bulkInsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTableName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fieldMappedAttributes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">static&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sequelize&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getQueryInterface&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/sequelize.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dialect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/index.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Just take SQLite as an example.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryInterface&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">SQLiteQueryInterface&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sequelize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryGenerator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query-interface.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">SQLiteQueryInterface&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">QueryInterface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/abstract/query-generator.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">bulkInsert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tableName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attributes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">options&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">QueryTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">INSERT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sequelize&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queryGenerator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bulkInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tableName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">records&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attributes&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/sequelize.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dialect&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bindParameters&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="nx">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sql&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parameters&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handleQueryResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">columnTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">executionError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errForStack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And finally I got what I was aiming for:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// src/dialects/sqlite/query.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">_handleQueryResponse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">metaData&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">columnTypes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errStack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// add the inserted row id to the instance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isUpsertQuery&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleInsertQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle bulkCreate AI primary key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;Statement&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">autoIncrementAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">autoIncrementAttribute&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawAttributes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">startId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getInsertIdField&lt;/span>&lt;span class="p">()]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">changes&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">startId&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">startId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">changes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rawAttributes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">primaryKeyAttribute&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">metaData&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getInsertIdField&lt;/span>&lt;span class="p">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon the &lt;code>_handleQueryResponse&lt;/code> method, it became apparent that Sequelize utilizes the last inserted ID and infers the remaining IDs when using &lt;code>bulkCreate&lt;/code>. Consequently, when using &lt;code>updateOnDuplicate: true&lt;/code> option, there is a possibility of receiving incorrect IDs in the return.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>A handy tip for obtaining accurate IDs&lt;/strong>&lt;br>
Enhance the data table by introducing a &lt;code>batch&lt;/code> field, assigning a batch number to each set of data being inserted. Subsequently, you can query the inserted IDs by using the corresponding batch number.&lt;/p>
&lt;/blockquote>
&lt;h1 id="risk-of-using-updateonduplicate-true">Risk of using &lt;code>updateOnDuplicate: true&lt;/code>&lt;/h1>
&lt;p>While utilizing the &lt;code>updateOnDuplicate: true&lt;/code> option, I observed that even though duplicate rows are skipped, the &lt;code>autoIncrement&lt;/code> key continues to increment. From the &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html">documentation of MySQL&lt;/a>, it said:&lt;/p>
&lt;blockquote>
&lt;p>The effects are not quite identical: For an InnoDB table where a is an auto-increment column, the INSERT statement increases the auto-increment value but the UPDATE does not.&lt;/p>
&lt;/blockquote>
&lt;p>The database follows a process of attempting to insert, incrementing the ID, and then the duplicate is detected. However, once the ID is auto-incremented, it cannot be rolled back.&lt;/p>
&lt;p>This situation presents a potential risk when utilizing a master-slave database architecture. As the ID is auto-incremented but duplicate is detected, the operation do not leave bin logs, there is a chance for key conficts to arise when the master goes down and the slave is promoted as the new master.&lt;/p></description></item><item><title>为什么我想离开腾讯？</title><link>https://qqqy.dev/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E7%A6%BB%E5%BC%80%E8%85%BE%E8%AE%AF/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%83%B3%E7%A6%BB%E5%BC%80%E8%85%BE%E8%AE%AF/</guid><description>&lt;p>正式提交离职申请以后，我终于可以写一篇文章来回答这个在每一次面试的时候都会被问到的问题。用简短的话来回答，其实就是想做出改变，在工作上逃离舒适区，争取在生活上进入舒适区。&lt;/p>
&lt;h1 id="工作和成长">工作和成长&lt;/h1>
&lt;p>由于受到整体大环境和公司降本增效措施的影响，部门接连几次调整，年终奖惨淡。尽管在这个阶段对我来说，相比起钱，我更注重自己能力的成长，但是我手上负责的项目也被砍的七七八八，一直在接手和维护被裁同事留下来的项目，许久没有接触新的技术和更进一步的挑战。虽然每天早十晚六这么混着好像也不错，业务都比较熟悉，项目也没有太大的挑战，领导和同事也不错，除了周报比较难憋出来。但是毕竟现在还年轻，还是想跳出舒适区，进一步挑战自己。我是一个在工作中很需要获得参与感和成就感的人，但是在大厂搬砖，好像一个产品做好了做砸了，跟我的关系不是特别大，我只是一个对着需求单码代码的人。相对来说，腾讯也不是一个工程师文化很浓厚的公司，对于很多业务来说，大家都只想赚快钱，仅仅代表个人感觉，也不展开了。在大公司很多时候技术栈的选择也比较有限，只能使用自研产品。总而言之，就是我需要换个新的环境，接受新的学习和挑战，是时候离开了。初步的计划是自我学习和调整，往某一个方向钻的深入一些，另外就是更多的参与到开源项目，学习和应用新的主流的开源技术。当然也要赚点生活费。&lt;/p>
&lt;h1 id="生活和家庭">生活和家庭&lt;/h1>
&lt;p>算上上大学的时间，一转眼已经在深圳待了六年半，曾经很喜欢这个城市，现在却只觉得这个城市遥远。我跟同事讨论为啥深圳的道路要让行人和自行车、电动车都挤在一条狭小的人行道上，同事开玩笑说深圳的路是给有车的人设计的，没车的人滚一边去。望着高耸入云的房价，我不甘心成为这个城市的养料。于是跟女朋友商量了一下，决定去广州生活，如果广州留不下，我们还可以去佛山。总而言之，目的是通过降低欲望，提升生活质量和幸福感。在深圳的时候，生活的环境都是水泥钢筋，好像大家讨论的都是薪资、股票、贷款，一门心思想着搞钱。相比之下，广州虽然也是大城市，但是生活气息还是浓厚不少，物价也更低，可以用跟在深圳差不多的价格租到面积大一倍的房子，而且是生活配套齐全的大小区，唯一的不足可能是不常有蓝天白云。&lt;/p>
&lt;h1 id="未来">未来&lt;/h1>
&lt;p>通过最近面试，发现自己还有很多的不足。感觉自己未来还是比较想往技术方向发展，想更深入地钻研，所以可能会让自己慢下来，进一步自我学习，做更多的思考和沉淀。&lt;/p></description></item><item><title>面试国外远程公司的一些记录</title><link>https://qqqy.dev/%E9%9D%A2%E8%AF%95%E5%9B%BD%E5%A4%96%E8%BF%9C%E7%A8%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://qqqy.dev/%E9%9D%A2%E8%AF%95%E5%9B%BD%E5%A4%96%E8%BF%9C%E7%A8%8B%E5%85%AC%E5%8F%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>去年11月份开始陆续在网上向国外一些支持远程工作的公司海投简历，记录一下这段经历。其实能拿到面试机会的就非常少，想去的估计就只有一两家了，最后也没有把握住机会。很多公司更倾向于在北美和欧洲招人，还有的因为数据、法律等问题明确拒绝中国大陆的人，可以参考我维护的&lt;a href="https://remotefrom.cn">支持在中国远程工作的公司的列表&lt;/a>。一开始我是在angel.co(一个创业公司网站，现在改名叫wellfound)上面投递的简历，大多数都没有回复。后面发现hackernews上有个叫whoishiring的账号，每个月1号都会发布一个帖子，让正在招人的公司可以在下面跟帖发jd，通过这个列表来投递简历是效率比较高的。还有些公司比较高冷，只能在他们的官网上发现，这个主要是找github上的项目以及想一下自己平常用的一些开发工具，去看对应的公司招不招人。&lt;/p>
&lt;p>最先给面试机会的是brankas，网上搜了下是印尼一家做金融开放API的公司，我没有任何FinTech的工作经验，也不是很感兴趣，不过打算练练手。首先是第一面是hr面，互相了解一下，会问一些简单的behavior questions，但是问到期望薪资的时候，我说出来的时候感觉对方有点吃惊，因为她用了&amp;quot;Very expensive&amp;quot;来形容，并且表示这个薪资一般是需要8~10年经验的，不过她还是表示会给我发take home assignment. Assignment比较简单，就是用go写一个简单的http服务，处理一下文件上传保存请求。但是写完发过去就没有下文了，连个拒信都没有，估计是说期望薪资的时候就不打算要了。&lt;/p>
&lt;p>第二个给面试机会的公司是Slab，洛杉矶一个做团队文档工具的小公司，产品跟notion有点像，但是试用下来感觉有些地方做的比notion还好。网上调查了下，两个co-founder是好像中国人，团队里也有之前在石墨工作的中国人，CEO是quilljs作者，整体感觉都不错，挺想去的。面试流程是比较标准的美企流程，首先是一个initial screen, 第一次约在北京时间凌晨5点，我爬起来以后，发现hr搞错了zoom链接，发了数封邮件都没有响应，就回去睡觉了，后面重新约了一次，听hr介绍了一下他们公司，之后发过来一个详细的邮件介绍hiring process. 先做一个online accessment, 限时一小时，这个题是从他们的代码功能里抽象的，不太典型但也不太难，用回溯写出来了。接下来约了两个小时的面试，一个小时System Design, 一个小时Behavior Questions. 面试之前我准备了非常多SD的东西，准备了一周多时间。正式面试约在北京时间早上7点，面SD的时候是CEO和一个工程师一起，题目也是Web应用类的，我抽象出来是一个爬虫+排序的项目，但是他们并不要求考虑可用性、高性能之类的，导致我准备的很多公式化的内容无用武之地，感觉这个项目实现起来并不复杂，所以也没太get到他们想要考察的点是什么，本来应该是我比较擅长的东西，但是确有点抓瞎。Behavior Questions详细问了简历上的两段工作经历，第一段经历是我大学时候的远程工作经历，时间比较长了，但还是问的比较详细，而我准备的不是太充分。其他的回答的感觉还可以。自我感觉表现比较平庸，没用发挥自己的优势，面试结束后两天，收到了拒信，当时还是挺难受的，不过也不算意料之外。&lt;/p>
&lt;p>第三个说可以聊一聊的公司是澳大利亚一家卖酒的公司，叫Good Pair Days，他们的产品看上去还可以，但我兴趣算是一般吧，加上技术栈不太符合，所以也没有特别准备。然后跟对方的CTO聊了半个小时，感觉双方不是太契合，就没有后续了。&lt;/p>
&lt;p>到这里很多能找到的支持远程的公司其实都被我投的七七八八了，比较绝望。后面发现了&lt;a href="https://www.recurse.com/">Recurse Center&lt;/a>项目，这个项目在中文互联网资料非常少，仔细看了下网站，蛮有兴趣的，想着能休息一段时间，自己学习提升，跟世界各地的人交流一下也不错。于是仔细写了申请，很快收到邮件说申请通过了，迎来第一次面试。面试官也是这个项目的参与者，但他不算太热情，有一点口音，一开始我一直没适应他用RC这个简称，第一个问题我就听错了，他问我会怎么跟别人介绍这个项目，我听成了怎么介绍我自己，给他念了一大段自我介绍，后面他纠正后我才重新回答。在聊天过程中我卡在一个问题比较久，他让我描述一个最近解决的bug，因为我平常做的东西大多需要结合业务背景，一下子不知道怎么说，最后我想着挑一个简单的说，就讲了我最近在自己的项目里面遇到的一个变量赋值的小bug. 其他的问题还算常规，自我感觉答的还行。没想到面试结束后很快就收到了拒信，没有讲原因，这个让我难受了蛮久，没想到一个学习项目也没有申请上。&lt;/p>
&lt;p>虽然最后也没拿到海外公司的offer, 但这个过程还是收获不少。第一是英语能力还要加强，每次我都会把要说的东西先写下来，然后结合chrome的实时翻译，面试的时候倒也能解决80%的问题，但是遇到没准备的问题，往往回答的不是很好，比如问到我不擅长什么东西，可能这个问题我用中文都很少回答，所以就回答的结结巴巴。第二个是技术方面，在海投过程中，发现了不少优秀的产品和项目，也发现了很多技术牛人的github，感觉毕业后几年在大厂里工作，忙着写业务搬砖，对自己要求降低了、松懈了，这个过程让我意识到自己还有很多需要提升的地方，激发了我学习的兴趣，也促成了我想要离职，学习和调整自己，同时参与到开源项目的想法。&lt;/p></description></item></channel></rss>